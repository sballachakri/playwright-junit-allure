variables
int x=2;
x represents 2

Arrays
Student[] s=new Student[1000]
Limitations of Arrays
1. fixed in size = once arrays is declared we can't increase or decrease.
2. Arrays can hold homogeneous data types.
3. No underlying data structure - no ready made methods available to perform, eg: search an element in Array.


Collection - to represent group individuals objects.
-to overcome all the above Collection are used
-Growable in nature
-holds homogeneous and heterogeneous data types
-Standard data structure - ready made methods available

Two main "root" interfaces of Java Collection classes.
1. Collection interface: java.util.Collection
2. Map interface: java.util.Map

1. Collection(I) interface - a group individuals objects to represent group of individual objects
2. List interface(I): insertion order is preserved, duplicates are allowed, null objects are allowed.
   1. ArrayList(C) implementation class
   2. LinkedList(C) implementation class
   3. Vector(C) implementation class - legacy classes
   4. Stack(C) implementation class - legacy classes
3. Set interface(I): no insertion order is not preserved, duplicates are not allowed
   1. HashSet(C) implementation class
   2. LinkedHashSet(C) implementation class
4. SortedSet interface(I): insertion in some sorting order, duplicates not allowed.
5. NavigableSet interface(I): it defines several navigable methods
   1. TreeSet(C) implementation class
6. Queue(I) interface: to represent a group of individual objects prior to processing.
   1. PriorityQueue(C) implementation class
   2. BlockingQueue(C) implementation class
   3. LinkedBlockingQueue(C) implementation class
   4. PriorityBlockingQueue(C) implementation class
7. Map(I) interface: to represent a group of objects as key value pairs, duplicate keys are not allowed.
   HashMap(C) implementation class
   LinkedHashMap(C) implementation class
   WeakHashMap(C) implementation class
   IdentityHashMap(C) implementation class
   Hashtable(C) implementation class  - legacy classes
   Properties(C)  implementation class - legacy classes
8. SortedMap(I) interface: to represent a group of objects as key value pairs in some sorting order.
9. NavigableMap(I) interface: it defines several navigable methods
   TreeMap(C) implementation class


In Collection:
1. Sorting objects:
    Comparable(I) : to implement default natural sorting order.
    Comparator(I): to implement customized sorting order.
2. Cursors concept is required - Getting objects one by one.
    1. Enumeration(I)
    2. Iterator(I)
    3. ListIterator(I)
3. Utility classes in Collection
    1. Collections(C) class - defines several utility methods for collection.
    2. Arrays class(C) - defines several utility methods for Array objects.


1. Collection(I) interface methods:
    size() - get size
    isEmpty() - is empty
    contains(Object o) - check
    containsAll(Object o) - check
    add(Object o) - add
    addAll(Collection c) - add all
    remove(Object o) - remove
    removeAll(Collection c)
    clear() - clear objects in collection
    retainAll(Collection c) - retains all
    Object[] toArray() - to covert to array
    Iterator iterator() - to get objects one by one
2. List(I) interface methods - in List - index plays important role.
    All methods in Collection are available.
    add(int index, Object o) - add at specified index
    addAll(int index, Collection c) - add collection starting specified index
    remove(int index) - remove object at specified index
    indexOf("A") - returns index of object
    lastIndexOf(("A") - returns last index of specified object
    get(int index) - get object at specified index
    ListIterator listIterator() - iterates one by one
    set(int index,Object o) - replace object at specified index
3. ArrayList(C) class:
    Constructors:
    ArrayList l=new ArrayLust();
    ArrayList l=new ArrayLust(int 100);
    ArrayList l=new ArrayLust(Collection c);

    To Synchronized version of ArrayList(C) object.
        ArrayList l=new ArrayList
        List l1=Collections.synchronizedList(l);
        --similarly for Set(I) and Map(I)
        public static Set synchronizedSet(Set s);
        public static Map synchronizedSet(Map m);
4. LinkedList(C) class:
    Constructors:
    LinkedList l=new LinkedList();
    LinkedList l=new LinkedList(Collection c);

    LinkedList specific methods:
        addFirst()
        addLast()
        getFirst()
        getLast()
        removeFirst()
        removeLast()

    ArrayList(C) vs LinkedList(C) class:
    ArrayList - best choice for retrieval operation.
    Insertion operation of element in the middle of the ArrayList is bad choice.
    LinkedList - best choice insertion operation of element in the middle of LinkedList.
    Insertion operation of element in the middle of the LinkedList is best choice.

5. Vector(C) class:
    Constructors:
    Vector v=new Vector()
    Vector v=new Vector(int initialCapacity)
    Vector v=new Vector(int initialCapacity,int incrementalCapacity)
    Vector v=new Vector(Collection c)

    Vector specific methods:
        size() - current objects
        capacity() - total objects accommodate
        addElement(Object o)
        elementAt(int index)
        firstElement()
        lastElement()
        removeElementAt(int index)
        removeAllElements(Object o)
        Enumeration elements() - get objects one by one
    Same as ArrayList
    Thread-safe
5. Stack(C) class: is child class of Vector(C), specially designed for LIFO
    Constructors:
        Stack s=new Stack()

        Stack specific methods:
        push(Object o) - to add object
        pop() - to remove last element
        peek() - to return without removing element
        empty() - to check
        search("A") - returns offset

Cursors: Retrieving objects one by one from collection.
    Type of cursors
        1. Enumeration
        2. Iterator
        3. ListIterator

    1. Enumeration:
        Enumeration e=v.elements();
            methods of Enumeration:
            hadMoreElements();
            nextElement();
                eg:
                Vector v=new Vector();
                for(int i=0;i<=10;i++){
                     v.addElement(i);
                   }
                   Enumeration e=v.elements();
                   while(e.hasMoreElements){
                   Integer I = Integer e.nextElement();
                   if(I%2==0)  // TO GET EVEN NUMBERS
                   sout(i)
                   }
                   sout(v)
            Limitations
                1. is used only for legacy classes.
                2. get only read and can't perform remove operation.
    2. Iterator:
        - universal cursor, it can apply for any collection.
        - can perform read and remove operation.
            Iterator itr=c.iterator();
                methods of Iterator:
                hasNext()
                next()
                remove()
                eg:
                ArrayList l=new ArrayList()
                for(int i=0;i<=10;i++){
                  l.add(i);
                  }                    }
                Iterator itr=l.iterator();
                while(itr.hasNext()){
                Integer I = (Integer) itr.next();
                if(I%2==0)
                 sout(I)
                 else
                 itr.remove();
                }
                sout(l);
            Limitations
                1. it always move to next/forward direction cursors
                2. read or remove operation, replace is not capable.
    3. ListIterator:
        - Bidirectional
        - read, remove, replacement and add operation.
            ListIterator litr=c.listIterator();
                methods of ListIterator:
                is child of Iterator
                hasNext()
                next()
                nextIndex()
                hasPrevious()
                previous()
                previousIndex()
                remove()
                set(Object n)
                add(Object a)
                eg:
                LinkedList l=new LinkedList()
                l.add("bala");
                l.add("venky");
                l.add("chiru");
                l.add("nag");
                ListIterator itr=l.ListIterator();
                while(itr.hasNext()){
                String s = (String) itr.next();
                if(s.equals("venky"))
                 l.remove();
                 else if(s.equals("nag"))
                 l.add("chaita");
                 else if(s.equals("chiru"))
                 itr.set("charan");
                 sout(l);

6. Set(I):
    Duplicates not allowed.
    Insertion order not preserved.
    All methods in Collection are available.
7. HashSet(C) class:
    Hast table data structure. ( Hash table )
    Duplicates not allowed.
    Insertion order not preserved.
    Heterogeneous
    null allowed
    Synchronised
    Search operation - best choice.

    Constructors:
    HashSet s=new HashSet();
    HashSet s=new HashSet(int initialCapacity);
    HashSet s=new HashSet(int initialCapacity, float loadFactor);
    HashSet s=new HashSet(Collection c);

8. LinkedHashSet(C) class:
   Child class HastSet
   * Duplicates not allowed and Insertion order is preserved.
    Constructors:
    LinkedHashSet s=new LinkedHashSet();
    LinkedHashSet s=new LinkedHashSet(int initialCapacity);
    LinkedHashSet s=new LinkedHashSet(int initialCapacity, float loadFactor);
    LinkedHashSet s=new LinkedHashSet(Collection c);

9. SortedSet(I):
    Duplicates not allowed.
    With some sorting order.
        methods of SortedSet:
        first()
        last()
        headSet(104) - returns less that 104 value
        tailSet(104) - return greater than 104 value
        subSet(103,110) - >103 and <110
        comparator() -

10. Navigable(I)
11. TreeSet(C) class: implementation of SortedSet(I)
    Balanced tree data structure.
    Duplicates not allowed.
    Insertion order not preserved.
    With some sorting order.
       Constructors:
       TreeSet t=new TreeSet();  // default natural sorting order
       TreeSet t=new TreeSet(); // customized sorting order
       TreeSet t=new TreeSet(Collection c)
       TreeSet t=new TreeSet(SortedSet c)


12. Map(I) - To represent group of individual objects in key value pairs
    - both keys and values are objects only
    - duplicate keys are not allowed but values can be duplicated
    - Insertion order is not preserved, based on on hashcode of keys.
    - each key value pair is called Entry
    - Map is considered as entry objects.

    methods of Map interface.
        put(Object k,Object v);
        put(1,"A");
        putAll(Map m);
        m.get(key) -- returns value the given key
        m.remove(key) -- removes key value pair
        m.contains(key) - checks for key
        m.containsValue(value)- checks for value
        m.isEmpty() -
        m.size(); - returns size
        m.clear() - removes all
        -- some more methods of Map -  also called Collection views of map
        Set s=m.keySet() - returns keys
        Collection c=m.values() - returns values
        Set s=m.entrySet() -- returns key-value
    Entry(I) interface: inner interface of Map interface.
            getKey()
            getValue()
            setValue(Object o)

13. HashMap(c) class:
        Constructors:
        HashMap m=new HashMap()
        HashMap m=new HashMap(int initialCapacity);
        HashMap m=new HashMap(int initialCapacity, float fillRatio);
        HashMap m=new HashMap(Map m)

     eg:
        Set s=m.entrySet();
        Iterator itr=s.iterator()
        while(itr.hasNext())
        {
        Map.Entry m1=(Map.Entry) itr.next();
        sout(m1.getKey +" "+m1.getValues());
        }

14. LinkedHashMap(C) class:
    - is child class of HashMap.
    - Insertion order is preserved.









Note:
Every Collection class implements Serializable(I) and Cloneable(I) interface.
Only ArrayList(C) and Vector(C) implements RandomAccess(I) interface in Collection class.

